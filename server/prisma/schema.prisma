// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  password       String
  status         String    @default("active") // active, locked
  failedAttempts Int       @default(0)
  createdAt      DateTime  @default(now())
  role           String    @default("user") // default role
  lockTo         DateTime?
}

model Room {
  id           Int               @id @default(autoincrement())
  room_name    String
  deparment_id Int
  deparment    Deparment         @relation(fields: [deparment_id], references: [id], onDelete: Cascade)
  Devices      Device[]
  oldHistories HistoryTransfer[] @relation("OldRoom")
  newHistories HistoryTransfer[] @relation("NewRoom")
}

model Deparment {
  id             Int    @id @default(autoincrement())
  deparment_name String
  rooms          Room[]
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String
  Devices Device[]
}

model Device {
  id            Int      @id @default(autoincrement())
  name          String
  model         String
  serial_number String
  manufacturer  String
  purchase_date DateTime
  price         Int
  qr_code       String?
  Room          Room?    @relation(fields: [roomId], references: [id])
  roomId        Int?
  Category      Category @relation(fields: [categoryId], references: [id])
  categoryId    Int
  Status        Status?  @relation(fields: [statusId], references: [id])
  statusId      Int?

  HistoryTransfer HistoryTransfer[]
  UsageHistory    UsageHistory[]
}

model Status {
  id      Int      @id @default(autoincrement())
  name    String
  Devices Device[]
}

model HistoryTransfer {
  id            Int      @id @default(autoincrement())
  deviceId      Int
  oldLocationId Int
  newLocationId Int
  transferDate  DateTime @default(now())
  Device        Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  OldRoom       Room     @relation("OldRoom", fields: [oldLocationId], references: [id], onDelete: Cascade)
  NewRoom       Room     @relation("NewRoom", fields: [newLocationId], references: [id], onDelete: Cascade)
}

model UsageHistory {
  id          Int       @id @default(autoincrement())
  deviceId    Int
  user        String
  roomId      Int
  usage_start DateTime  @default(now())
  usage_end   DateTime
  end         DateTime?
  purpose     String?
  isHidden    Boolean   @default(false)
  Device      Device    @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  History     History[]
}

model History {
  id           Int          @id @default(autoincrement())
  usageId      Int
  UsageHistory UsageHistory @relation(fields: [usageId], references: [id], onDelete: Cascade)
}
