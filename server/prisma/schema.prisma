// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  password       String
  status         String    @default("active") // active, locked
  failedAttempts Int       @default(0)
  createdAt      DateTime  @default(now())
  role           String    @default("user") // default role
  lockTo         DateTime?
}

model Room {
  id           Int       @id @default(autoincrement())
  room_name    String
  deparment_id Int
  deparment    Deparment @relation(fields: [deparment_id], references: [id], onDelete: Cascade)

  oldHistories HistoryTransfer[] @relation("OldRoom")
  newHistories HistoryTransfer[] @relation("NewRoom")
  Device       Device[]
}

model Deparment {
  id             Int    @id @default(autoincrement())
  deparment_name String
  rooms          Room[]
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String
  Devices Device[]
}

model Device {
  id                  Int                   @id @default(autoincrement())
  name                String
  model               String
  serial_number       String
  manufacturer        String
  purchase_date       DateTime
  price               Int
  qr_code             String?
  Category            Category              @relation(fields: [categoryId], references: [id])
  categoryId          Int
  Status              Status?               @relation(fields: [statusId], references: [id])
  statusId            Int?
  roomId              Int                   @default(10)
  Room                Room                  @relation(fields: [roomId], references: [id])
  HistoryTransfer     HistoryTransfer[]
  UsageHistory        UsageHistory[]
  Maintenance_History Maintenance_History[]
}

model Status {
  id                  Int                   @id @default(autoincrement())
  name                String
  Devices             Device[]
  Maintenance_History Maintenance_History[]
}

model HistoryTransfer {
  id            Int      @id @default(autoincrement())
  deviceId      Int
  oldLocationId Int
  newLocationId Int
  transferDate  DateTime @default(now())
  Device        Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  OldRoom       Room     @relation("OldRoom", fields: [oldLocationId], references: [id], onDelete: Cascade)
  NewRoom       Room     @relation("NewRoom", fields: [newLocationId], references: [id], onDelete: Cascade)
}

model UsageHistory {
  id          Int       @id @default(autoincrement())
  deviceId    Int
  user        String
  usage_start DateTime  @default(now())
  usage_end   DateTime?
  end         DateTime?
  purpose     String?
  isHidden    Boolean   @default(false)
  Device      Device    @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  History     History[]
}

model History {
  id           Int          @id @default(autoincrement())
  usageId      Int
  UsageHistory UsageHistory @relation(fields: [usageId], references: [id], onDelete: Cascade)
}

model Material {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  imageUrl     String?
  unit         String
  trash        Boolean       @default(false)
  inventory    Inventory[]
  transactions Transaction[]
  orderItems   OrderItem[]
}

model Inventory {
  id                   Int                    @id @default(autoincrement())
  material             Material               @relation(fields: [materialId], references: [id])
  materialId           Int
  quantity             Int                    @default(0)
  MaintenanceInventory MaintenanceInventory[]
}

model Transaction {
  id                     Int                   @id @default(autoincrement())
  material               Material              @relation(fields: [materialId], references: [id])
  materialId             Int
  transactionType        String
  quantity               Int
  price                  Float?
  transactionDate        DateTime              @default(now())
  MaintenanceInventory   MaintenanceInventory? @relation(fields: [maintenanceInventoryId], references: [id], onDelete: Cascade)
  maintenanceInventoryId Int?
}

model Order {
  id           Int         @id @default(autoincrement())
  orderDate    DateTime    @default(now())
  orderDateEnd DateTime?
  status       String
  orderItems   OrderItem[]
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    Int
  material   Material @relation(fields: [materialId], references: [id])
  materialId Int
  quantity   Int
  price      Float
}

model Maintenance_History {
  id            Int                    @id @default(autoincrement())
  deviceId      Int
  device        Device                 @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  date_start    DateTime               @default(now())
  date_end      DateTime
  employee_code Int
  nhan_vien     nhan_vien              @relation(fields: [employee_code], references: [id])
  cost          Float
  description   String?
  inventories   MaintenanceInventory[]
  Status        Status                 @relation(fields: [statusId], references: [id])
  statusId      Int                    @default(4)
}

model MaintenanceInventory {
  id                   Int                 @id @default(autoincrement())
  maintenanceHistory   Maintenance_History @relation(fields: [maintenanceHistoryId], references: [id], onDelete: Cascade)
  maintenanceHistoryId Int
  inventory            Inventory           @relation(fields: [inventoryId], references: [id])
  inventoryId          Int
  quantityMater        Int
  transactions         Transaction[]
}

model nhan_vien {
  id                  Int                   @id @default(autoincrement())
  name                String
  employee_code       String                @unique
  position            String
  Date_Start          DateTime              @default(now())
  Maintenance_History Maintenance_History[]
}
